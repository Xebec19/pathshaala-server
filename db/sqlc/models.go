// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type UserRole string

const (
	UserRoleTeacher UserRole = "teacher"
	UserRoleStudent UserRole = "student"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.UserRole, nil
}

type Group struct {
	GroupID   uuid.UUID    `json:"group_id"`
	GroupName string       `json:"group_name"`
	Teachers  []uuid.UUID  `json:"teachers"`
	Students  []uuid.UUID  `json:"students"`
	CreatedOn sql.NullTime `json:"created_on"`
	UpdatedOn sql.NullTime `json:"updated_on"`
}

type Score struct {
	TestID    uuid.UUID      `json:"test_id"`
	TestTaker uuid.UUID      `json:"test_taker"`
	CheckedBy uuid.NullUUID  `json:"checked_by"`
	CheckedOn sql.NullTime   `json:"checked_on"`
	Status    sql.NullString `json:"status"`
}

type Test struct {
	TestID      uuid.UUID      `json:"test_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	CreatedBy   uuid.NullUUID  `json:"created_by"`
	Enrolled    []uuid.UUID    `json:"enrolled"`
	Schedule    sql.NullTime   `json:"schedule"`
	StartTime   sql.NullTime   `json:"start_time"`
	EndTime     sql.NullTime   `json:"end_time"`
	Link        string         `json:"link"`
	CreatedOn   sql.NullTime   `json:"created_on"`
	UpdatedOn   sql.NullTime   `json:"updated_on"`
}

type User struct {
	UserID     uuid.UUID      `json:"user_id"`
	FirstName  string         `json:"first_name"`
	LastName   sql.NullString `json:"last_name"`
	Email      sql.NullString `json:"email"`
	Password   string         `json:"password"`
	ProfilePic sql.NullString `json:"profile_pic"`
	CreatedOn  sql.NullTime   `json:"created_on"`
	UpdatedOn  sql.NullTime   `json:"updated_on"`
	Role       UserRole       `json:"role"`
}
